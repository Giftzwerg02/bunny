; Specify document-template and slide-template per commandline
; export slidetemplate=$(cat ./presentation/code/slide-template.html)
; export presentationtemplate=$(cat ./presentation/code/presentation-template.html)
; ./bunny presentation/code/generate-presentation.bny -- --slide-template "\"${slidetemplate}\"" --document-template "\"${presentationtemplate}\"" > ./presentation/prezi.html
(
    (def content (input) (
        (format "<p>{}</p>" [input])
    ))

    (def title (input) (
        (format "<h1>{}</h1>" [input])
    ))

    (def figure (w h img-path) (
        (format "<figure><img src='{}' width='{}' height='{}' /></figure>" [img-path (to-string w) (to-string h)])
    ))

    (def code (input) (
        (def sanitized (
            (def san-1 (replace-all "<" input "&lt;"))
            (replace-all ">" san-1 "&gt;")
        ))

        (format "<pre><code>{}</code></pre>" [sanitized])
    ))

    (def list (items) (
        (def item-elems 
            (map (\ (item) (format "<li>{}</li>" [item])) items))

        (format "<ul>{}</ul>" [(join item-elems "")])
    ))

    (def slide (source) (
        (format slide-template [(join source "")])
    ))

    (def presentation (slides) (
        (format document-template [(join slides "")])
    ))

    (presentation [
        (slide [
            (title "Bunny")
            (figure 700 700 "./imgs/bunny-logo.png")
        ])

        (slide [
            (content "is an")
            (list [
                "immutable"
                "deterministic"
                "functional"
                "interpreted"
                "lazy"
                "statically-typed"
                "strongly-typed"
            ])
            (content "language for creating graphs.")
        ])

        (slide [
            (title "Show me the code.")
        ])

        (slide [
            (title "Yes, it's a LISP.")
            (content "<i>(Without homoiconicity)</i>")
            (code "(def fib (n) 
    (foldl
        (\ (acc num) (
            (def l (len acc))
            (def f1 (get acc (- l 1)))
            (def f2 (get acc (- l 2)))
            (append acc (+ f1 f2))
        ))
        [0 1]
        (range 0 n)
    )
)

(fib 20)")
        ])

        (slide [
            (title "Quick Technical Rundown")
        ])

        (slide [
            (title "Lexer, Parser, Scoping")
            (list [
                "Extremely simple due to minimal syntax of the language (<code>def</code> and <code>\</code> as the <b>only</b> keywords!)"
                "Variable declaration and visibilty checking done in a single pass (enforced define before use)"
            ])
        ])

        (slide [
            (content "Lexer / Parser written in <code>pest</code>:")
            (code "
program = _{ SOI ~ func_call ~ EOI }

expr = { 
	 float 
	 | int 
	 | string 
	 | array 
	 | dict
	 | func_call 
	 | color 
	 | identifier
}")
        ])

        (slide [
            (title "Typechecker")
            (content "Implements Hindley-Milner's <i>Algorithm J</i>")
            (code "
; Can infer generics
(def arr [[1 2] [3 4] [5 6]]) ; array[array[int]]

; Does not require type annotations, even for complex types
(def last (a) (get a (- (len a) 1)))
(def first-of-last (compose1 last first)) ; array[array['6]] -> '6

; Supports let-polymorphism
(def id (x) x) 
(get (id [1 2 3]) (id 0)) ; => 1")
        ])

        (slide [
            (title "Runner")
            (content "Converts the AST into an IR that rust can run:")
            (code "pub type LazyType<T> = Arc<LazyCell<T, Box<dyn FnOnce() -> T>>>;

#[derive(Debug, Clone)]
pub enum Lazy {
    Int(LazyType<i64>),
    Float(LazyType<f64>),
    String(LazyType<ImString>),
    Color(LazyType<Srgba<u8>>),
    Opaque(LazyType<Element>), // internal repr of SVGs
    Array(LazyType<Vector<Lazy>>),
    Dict(LazyType<HashMap<Value, Lazy>>),
    Lambda(LazyType<LazyLambda>),
}
")
        ])

        (slide [
            (content "Result: A tree of function-pointers (<code>LazyCell</code>s)!")
                
            (content "Control structures are implemented using laziness:")

            (code "#[forall a | cond:int() => iftrue:a => iffalse:a => ret:a]
fn 'if'(Lazy::Int(cond), iftrue, iffalse){
    lazy!([iftrue -> i1, iffalse -> i2], {
        if eval!(cond) != 0 {
            eval!(i1)
        } else {
            eval!(i2)
        }
    })
}
            ")

            (content "(<code>if</code> is just a function)")
        ])

        (slide [
            (title "Fibonacci")
            (content "notice something?")
            (figure 900 400 "./imgs/hyperfine.svg")
        ])

        (slide [
            (title "Demo Time")
            (figure 300 500 "./imgs/giphy.webp")
        ])
    ])
)